/*! MIG-TimeSheet Optimized JS v1.0 | Minified for Production */
!function () { "use strict"; let dashboardInitialized = !1; function updateTime() { const e = new Date, t = e.toLocaleTimeString("en-US", { hour12: !1, hour: "2-digit", minute: "2-digit", second: "2-digit" }), n = e.toLocaleDateString("en-US", { weekday: "short", month: "short", day: "numeric" }); document.getElementById("timeDisplay") && (document.getElementById("timeDisplay").textContent = `${t} • ${n}`), document.getElementById("timeDisplayMobile") && (document.getElementById("timeDisplayMobile").textContent = `${t} • ${n}`) } function updateClockStatus() { const e = localStorage.getItem("clockStatus") || "clocked-out", t = document.getElementById("statusText"), n = document.getElementById("statusTextMobile"), a = document.getElementById("clockStatusIcon"), o = document.getElementById("clockStatusIconMobile"); t && (t.textContent = "clocked-in" === e ? "Clocked In" : "Clocked Out"), n && (n.textContent = "clocked-in" === e ? "Clocked In" : "Clocked Out"), a && (a.className = "clocked-in" === e ? "bi bi-clock-fill" : "bi bi-clock"), o && (o.className = "clocked-in" === e ? "bi bi-clock-fill" : "bi bi-clock") } function clockIn() { localStorage.setItem("clockStatus", "clocked-in"), localStorage.setItem("clockInTime", new Date().toISOString()), updateClockStatus(), showToast("Successfully clocked in!", "success"), updateClockButtons() } function clockOut() { localStorage.setItem("clockStatus", "clocked-out"), localStorage.setItem("clockOutTime", new Date().toISOString()), updateClockStatus(), showToast("Successfully clocked out!", "success"), updateClockButtons() } function updateClockButtons() { const e = localStorage.getItem("clockStatus") || "clocked-out", t = document.getElementById("clockInBtn"), n = document.getElementById("clockOutBtn"), a = document.getElementById("clockInBtnMobile"), o = document.getElementById("clockOutBtnMobile"); t && (t.disabled = "clocked-in" === e, t.style.opacity = "clocked-in" === e ? "0.5" : "1"), n && (n.disabled = "clocked-out" === e, n.style.opacity = "clocked-out" === e ? "0.5" : "1"), a && (a.disabled = "clocked-in" === e, a.style.opacity = "clocked-in" === e ? "0.5" : "1"), o && (o.disabled = "clocked-out" === e, o.style.opacity = "clocked-out" === e ? "0.5" : "1") } function quickAddTimesheet() { showToast("Quick timesheet entry feature coming soon!", "info") } function showToast(e, t = "info", n = 4e3) { document.querySelectorAll(".toast-notification").forEach(e => e.remove()); const a = document.createElement("div"); a.className = `toast-notification alert alert-${t} alert-dismissible fade show`, a.style.cssText = "position:fixed;top:20px;right:20px;z-index:1060;max-width:350px;box-shadow:0 4px 12px rgba(0,0,0,0.15);border-radius:12px;border:none"; const o = { success: "bi-check-circle-fill", error: "bi-exclamation-triangle-fill", warning: "bi-exclamation-triangle-fill", info: "bi-info-circle-fill" }; a.innerHTML = `<div class="d-flex align-items-center"><i class="bi ${o[t] || o.info} me-2"></i><span>${e}</span><button type="button" class="btn-close ms-auto" data-bs-dismiss="alert"></button></div>`, document.body.appendChild(a), setTimeout(() => { a.parentNode && (a.classList.remove("show"), setTimeout(() => a.remove(), 150)) }, n) } function toggleSidebar() { const e = document.getElementById("sidebar"), t = document.getElementById("main-content"), n = document.getElementById("toggle-icon"); e.classList.contains("compact") ? (e.classList.remove("compact"), t.classList.remove("sidebar-compact"), n.className = "bi bi-chevron-left", localStorage.setItem("sidebar-compact", "false")) : (e.classList.add("compact"), t.classList.add("sidebar-compact"), n.className = "bi bi-chevron-right", localStorage.setItem("sidebar-compact", "true")) } function showSystemStatus() { fetch("/admin/system/status", { method: "GET", headers: { Accept: "application/json", "X-CSRF-TOKEN": document.querySelector('meta[name="csrf-token"]').getAttribute("content") } }).then(e => e.json()).then(t => { t.success ? showAdminModal("System Status", t.html || generateSystemStatusHTML(t)) : showToast("System Status: All systems operational", "success") }).catch(e => { console.error("System status error:", e); const t = { server: "Online", database: "Connected", users_online: Math.floor(10 * Math.random()) + 10, last_backup: "Today 3:00 AM", disk_usage: Math.floor(40 * Math.random()) + 20 + "%" }; showAdminModal("System Status", generateSystemStatusHTML(t)) }) } function showQuickReports() { fetch("/admin/quick/reports", { headers: { Accept: "application/json" } }).then(e => e.json()).then(t => { t && t.success ? showAdminModal("Quick Reports", generateQuickReportsHTML(t)) : showToast("Unable to load reports", "danger") }).catch(e => { console.error("Quick reports error:", e), showToast("Unable to load reports", "danger") }) } function generateSystemStatusHTML(e) { return `<div class="system-status-grid"><div class="row"><div class="col-md-6"><div class="status-item"><i class="bi bi-server text-success"></i><span>Server Status: <strong>${e.server || "Online"}</strong></span></div></div><div class="col-md-6"><div class="status-item"><i class="bi bi-database text-success"></i><span>Database: <strong>${e.database || "Connected"}</strong></span></div></div><div class="col-md-6"><div class="status-item"><i class="bi bi-people text-info"></i><span>Active Users: <strong>${e.users_online || "N/A"}</strong></span></div></div><div class="col-md-6"><div class="status-item"><i class="bi bi-hdd text-warning"></i><span>Disk Usage: <strong>${e.disk_usage || "N/A"}</strong></span></div></div></div><div class="mt-3"><small class="text-muted">Last Backup: ${e.last_backup || "Unknown"}</small></div></div>` } function generateQuickReportsHTML(e) { return `<div class="quick-reports-summary"><div class="report-item mb-3"><h6><i class="bi bi-calendar-day text-primary"></i> Daily Summary</h6><p>${e.daily_summary}</p></div><div class="report-item mb-3"><h6><i class="bi bi-graph-up text-success"></i> Weekly Trend</h6><p>${e.weekly_trend}</p></div><div class="report-item mb-3"><h6><i class="bi bi-star text-warning"></i> Top Performers</h6><ul class="list-unstyled">${e.top_performers.map(e => `<li>• ${e}</li>`).join("")}</ul></div><div class="report-item"><h6><i class="bi bi-clock-history text-info"></i> Pending Approvals</h6><p><span class="badge bg-warning">${e.pending_approvals}</span> timesheets awaiting approval</p></div></div>` } function showAdminModal(e, t) { const n = document.createElement("div"); n.className = "modal fade", n.innerHTML = `<div class="modal-dialog modal-lg"><div class="modal-content"><div class="modal-header" style="background: linear-gradient(90deg, #4e54c8, #8f94fb); color: white;"><h5 class="modal-title"><i class="bi bi-shield-check me-2"></i>${e}</h5><button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button></div><div class="modal-body">${t}</div><div class="modal-footer"><button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button><button type="button" class="btn btn-primary" onclick="refreshAdminData()">Refresh</button></div></div></div>`, document.body.appendChild(n); const a = new bootstrap.Modal(n); a.show(), n.addEventListener("hidden.bs.modal", () => n.remove()) } function refreshAdminData() { showToast("Admin data refreshed", "info") } function showComingSoon(e) { document.querySelector(".nav-header-text") ? showToast("Admin Feature: " + e + " is coming soon!", "info") : showToast("This feature is coming soon!", "info") } function showAdminNotification(e, t = "info", n = 5e3) { const a = document.createElement("div"); a.className = `admin-notification alert alert-${t} alert-dismissible fade show`, a.style.cssText = "position:fixed;top:20px;right:20px;z-index:1060;max-width:300px;box-shadow:0 4px 12px rgba(0,0,0,0.15);", a.innerHTML = `<strong>Admin:</strong> ${e}<button type="button" class="btn-close" data-bs-dismiss="alert"></button>`, document.body.appendChild(a), setTimeout(() => { a.parentNode && a.remove() }, n) } function initializeAdminDropdowns() { document.querySelectorAll(".dropdown-toggle-nav").forEach(function (e) { e.addEventListener("click", function (t) { t.preventDefault(), t.stopPropagation(); const n = e.getAttribute("data-bs-target"), a = document.querySelector(n), o = e.querySelector(".collapse-icon"); if (a) { const t = a.classList.contains("show"); document.querySelectorAll(".collapse.show").forEach(function (e) { e !== a && (e = bootstrap.Collapse.getInstance(e)) && e.hide() }); let e = bootstrap.Collapse.getInstance(a); e || (e = new bootstrap.Collapse(a, { toggle: !1 })), t ? e.hide() : e.show() } }) }), document.querySelectorAll(".collapse").forEach(function (e) { const t = document.querySelector(`[data-bs-target="#${e.id}"]`), n = t ? t.querySelector(".collapse-icon") : null; e.addEventListener("show.bs.collapse", function () { t && t.setAttribute("aria-expanded", "true"), n && (n.style.transform = "rotate(180deg)") }), e.addEventListener("shown.bs.collapse", function () { localStorage.setItem("admin-nav-" + e.id, "expanded") }), e.addEventListener("hide.bs.collapse", function () { t && t.setAttribute("aria-expanded", "false"), n && (n.style.transform = "rotate(0deg)") }), e.addEventListener("hidden.bs.collapse", function () { localStorage.setItem("admin-nav-" + e.id, "collapsed") }); const a = localStorage.getItem("admin-nav-" + e.id); "expanded" === a && !e.classList.contains("show") && setTimeout(() => { new bootstrap.Collapse(e, { show: !0 }) }, 100) }), setTimeout(() => { document.querySelectorAll(".collapse.show").forEach(function (e) { const t = document.querySelector(`[data-bs-target="#${e.id}"]`), n = t ? t.querySelector(".collapse-icon") : null; n && (n.style.transform = "rotate(180deg)"), t && t.setAttribute("aria-expanded", "true") }) }, 200) } function initializeNavbarScrollEffect() { const e = document.querySelector(".navbar-fixed-mobile"); if (!e) return; let t, n = !1; function a() { const a = window.pageYOffset || document.documentElement.scrollTop; a > 20 ? e.classList.add("scrolled") : e.classList.remove("scrolled"), t && clearTimeout(t), n || (e.style.transform = "translateY(0)"), n = !0, t = setTimeout(() => { n = !1, a > 100 && (e.style.transform = "translateY(0)") }, 150) } let o; window.addEventListener("scroll", () => { o || (o = setTimeout(() => { a(), o = null }, 16)) }, { passive: !0 }); let r = 0, i = 0; document.addEventListener("touchstart", e => { r = e.changedTouches[0].screenY }, { passive: !0 }), document.addEventListener("touchmove", e => { i = e.changedTouches[0].screenY; const t = r - i; Math.abs(t) > 5 && (t > 0 ? (e.style.transform = "translateY(0)") : (e.style.transform = "translateY(0)")) }, { passive: !0 }) } function initializeSidebarScrolling() { const e = document.querySelector(".sidebar-nav-container"), t = document.querySelector(".mobile-nav-container"); function n(e) { if (!e) return; const t = e.querySelectorAll(".nav-link"); t.forEach(e => { e.addEventListener("click", function (t) { this.hasAttribute("data-bs-target") || setTimeout(() => { e.scrollTop > 0 && e.scrollTo({ top: Math.max(0, e.scrollTop - 50), behavior: "smooth" }) }, 100) }) }) } n(e), n(t); function a(e) { if (!e) return; e.addEventListener("keydown", function (e) { "ArrowUp" === e.key || "ArrowDown" === e.key ? (e.preventDefault(), e.scrollBy({ top: 50 * ("ArrowUp" === e.key ? -1 : 1), behavior: "smooth" })) : void 0 }) } a(e), a(t), setTimeout(() => { scrollToActiveItem(e), scrollToActiveItem(t) }, 300) } function scrollToActiveItem(e) { if (!e) return; const t = e.querySelector(".nav-link.active"); if (t) { const n = e.getBoundingClientRect(), a = t.getBoundingClientRect(); (a.top < n.top || a.bottom > n.bottom) && e.scrollTo({ top: Math.max(0, t.offsetTop - e.offsetTop - e.offsetHeight / 2 + t.offsetHeight / 2), behavior: "smooth" }) } } function createToastContainer() { const e = document.createElement("div"); return e.id = "toast-container", e.className = "toast-container position-fixed bottom-0 end-0 p-3", e.style.zIndex = "1050", document.body.appendChild(e), e } function showNotification(e, t) { const n = document.getElementById("toast-container") || createToastContainer(), a = document.createElement("div"); a.className = `toast align-items-center text-bg-${e} border-0`, a.setAttribute("role", "alert"), a.innerHTML = `<div class="d-flex"><div class="toast-body">${t}</div><button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button></div>`, n.appendChild(a); const o = new bootstrap.Toast(a); o.show(), a.addEventListener("hidden.bs.toast", () => a.remove()) } function fetchWithRetry(e, t = {}, n = 3, a = null) { return new Promise((o, r) => { function i(e, t, n) { fetch(e, t).then(e => e.ok ? o(e) : r(new Error(`HTTP ${e.status}: ${e.statusText}`))).catch(e => { console.warn(`Attempt ${n} failed:`, e), n > 1 ? setTimeout(() => i(e, t, n - 1), 1e3) : r(e) }) } i(e, t, n) }) } function generateFallbackHolidays(e, t) { const n = []; for (let a = 1; a <= new Date(e, t, 0).getDate(); a++) { const o = new Date(e, t - 1, a); if (0 === o.getDay() || 6 === o.getDay()) { const r = `${e}-${String(t).padStart(2, "0")}-${String(a).padStart(2, "0")}`; n.push({ date: r, is_holiday: !0, holiday_info: { name: 0 === o.getDay() ? "Sunday" : "Saturday" } }) } } return n } function generateFallbackDayTypes(e, t) { const n = generateFallbackHolidays(e, t), a = []; for (let o = 1; o <= new Date(e, t, 0).getDate(); o++) { const r = new Date(e, t - 1, o), i = `${e}-${String(t).padStart(2, "0")}-${String(o).padStart(2, "0")}`; a.push({ date: i, is_today: r.toDateString() === new Date().toDateString(), is_holiday: n.some(e => e.date === i), is_work_day: !1 }) } return a } function getSaturdayNumber(e) { const t = new Date(e.getFullYear(), e.getMonth(), 1), n = 6 - t.getDay(); return Math.ceil((e.getDate() - n) / 7) } function getOrdinal(e) { const t = e % 10, n = e % 100; return t + (n - t) / 10 == 1 ? "th" : 1 === t ? "st" : 2 === t ? "nd" : 3 === t ? "rd" : "th" } function generateMockData(e) { const t = { day: { labels: ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"], data: [8, 7.5, 8.5, 8, 7, 0, 0] }, week: { labels: ["Week 1", "Week 2", "Week 3", "Week 4"], data: [40, 38, 42, 35] }, month: { labels: ["Week 1", "Week 2", "Week 3", "Week 4"], data: [40, 38, 42, 35] }, year: { labels: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], data: [160, 150, 165, 155, 170, 160, 165, 170, 160, 165, 155, 150] } }; return t[e] || t.day } const DashboardManager = { ctx: document.getElementById("workHoursChart"), totalHoursEl: document.getElementById("total-hours"), progressBar: document.getElementById("today-progress-bar"), progressText: document.getElementById("today-progress-text"), chartLoading: document.getElementById("chart-loading"), chartError: document.getElementById("chart-error"), chartContent: document.getElementById("chart-content"), dataRangeIndicator: document.getElementById("data-range-indicator"), welcomeHoursToday: document.getElementById("welcome-hours-today"), state: { range: "day", chart: null, attendanceData: [], isLoading: !1, autoRefreshInterval: null, durationUpdateInterval: null }, formatHours(e) { if (0 === e || isNaN(e)) return "0h"; const t = Math.floor(e), n = Math.round(60 * (e - t)); return 0 === t ? n + "m" : 0 === n ? t + "h" : `${t}h ${n}m` }, showLoading() { this.chartLoading && this.chartLoading.classList.remove("d-none"), this.chartError && this.chartError.classList.add("d-none"), this.chartContent && (this.chartContent.style.opacity = "0.5") }, hideLoading() { this.chartLoading && this.chartLoading.classList.add("d-none"), this.chartContent && (this.chartContent.style.opacity = "1") }, showError(e, t = "") { this.chartError && (this.chartError.querySelector("h6").textContent = e, this.chartError.querySelector("p").textContent = t, this.chartError.classList.remove("d-none")), this.chartLoading && this.chartLoading.classList.add("d-none"), this.chartContent && (this.chartContent.style.opacity = "0.8") }, async renderChart() { if (this.state.isLoading) return void console.log("⏳ Chart already loading, skipping duplicate call..."); this.state.isLoading = !0, this.showLoading(), console.log(`📊 Rendering chart for range: ${this.state.range}`); try { const e = await fetch(`/timesheet/summary?range=${this.state.range}&refresh=true`); if (!e.ok) throw new Error(`HTTP ${e.status}: ${e.statusText}`); const t = await e.json(), n = { labels: t.labels || [], data: t.data || [], rangeLabel: t.rangeLabel || "Work Summary" }; let a = 0; t.range_total_minutes !== void 0 ? a = t.range_total_minutes / 60 : a = n.data.reduce((e, t) => e + t, 0); this.totalHoursEl && (this.totalHoursEl.textContent = this.formatHours(a)), this.dataRangeIndicator && (this.dataRangeIndicator.textContent = n.rangeLabel); if (t.totals) { const e = document.getElementById("welcome-hours-today"), a = document.getElementById("welcome-hours-week"), o = document.getElementById("welcome-hours-month"), r = document.getElementById("welcome-tasks-today"); e && (e.textContent = this.formatHours((e => { if (!e || "00:00" === e) return 0; const [t, n] = e.split(":").map(Number); return t + n / 60 })(t.totals.daily))), a && (a.textContent = this.formatHours((e => { if (!e || "00:00" === e) return 0; const [t, n] = e.split(":").map(Number); return t + n / 60 })(t.totals.weekly))), o && (o.textContent = this.formatHours((e => { if (!e || "00:00" === e) return 0; const [t, n] = e.split(":").map(Number); return t + n / 60 })(t.totals.monthly))), r && (r.textContent = t.today?.tasks_count || 0) } const o = t.today?.done_hours || 0, r = t.today?.target_hours || 8, i = Math.min(100, 100 * o / r); this.progressBar && this.progressText && (this.progressBar.style.width = i + "%", this.progressBar.className = `progress-bar ${i < 50 ? "bg-danger" : i < 75 ? "bg-warning" : "bg-success"}`, this.progressText.textContent = `${this.formatHours(o)} / ${r}h`); this.state.chart && this.state.chart.destroy(), this.state.chart = new Chart(this.ctx, { type: "bar", data: { labels: n.labels, datasets: [{ label: "Hours Worked", data: n.data, backgroundColor: e => { const t = e.parsed.y; return t >= 8 ? "rgba(34, 197, 94, 0.2)" : t >= 6 ? "rgba(59, 130, 246, 0.2)" : t >= 4 ? "rgba(251, 191, 36, 0.2)" : "rgba(239, 68, 68, 0.2)" }, borderColor: e => { const t = e.parsed.y; return t >= 8 ? "#22c55e" : t >= 6 ? "#3b82f6" : t >= 4 ? "#fbbf24" : "#ef4444" }, borderWidth: 2, borderRadius: 6, borderSkipped: !1 }] }, options: { responsive: !0, maintainAspectRatio: !1, plugins: { legend: { display: !1 }, tooltip: { backgroundColor: "rgba(0, 0, 0, 0.8)", cornerRadius: 8, displayColors: !1, callbacks: { title: function (e) { return e[0].label }, label: e => { const t = e.parsed.y; let n = ""; return "day" === this.state.range && (t >= 8 ? n = " ✅ Full Day" : t >= 6 ? n = " 📊 Good Progress" : t > 0 ? n = " 🕒 Part Time" : n = " 📅 No Work"), `Hours: ${this.formatHours(t)}${n}` }, footer: e => "day" === this.state.range && e[0].parsed.y >= 8 ? "Target achieved! 🎯" : "" } } } }, scales: { y: { beginAtZero: !0, min: 0, max: "day" === this.state.range ? 12 : "week" === this.state.range ? 50 : "month" === this.state.range ? 15 : 200, ticks: { stepSize: "day" === this.state.range ? 2 : "week" === this.state.range ? 10 : "month" === this.state.range ? 2 : 25, callback: e => this.formatHours(e) }, grid: { color: "rgba(0,0,0,0.05)" }, title: { display: !0, text: n.rangeLabel } }, x: { grid: { display: !1 }, title: { display: !0, text: "day" === this.state.range ? "Days" : "week" === this.state.range ? "Weeks" : "month" === this.state.range ? "Days" : "Months" } } }, interaction: { intersect: !1, mode: "index" } }}), this.state.attendanceData = t.attendance || [], this.renderCalendar(), this.hideLoading(), this.state.isLoading = !1 }catch(e) { console.error("Chart rendering error:", e), this.showError("⚠️ Failed to load timesheet data.", "The server may be unavailable or you might not have entered data yet. Using sample data for demonstration."); const t = generateMockData(this.state.range); this.state.chart && this.state.chart.destroy(), this.state.chart = new Chart(this.ctx, { type: "bar", data: { labels: t.labels, datasets: [{ label: "Sample Hours Data", data: t.data, backgroundColor: "rgba(255, 193, 7, 0.1)", borderColor: "#ffc107", borderWidth: 2, borderDash: [5, 5] }] }, options: {} }), this.state.isLoading = !1 } }, async fetchAttendanceStatus(){ try { const e = await fetchWithRetry("/attendance/status", { method: "GET" }, 3); if (e.ok) { const t = await e.json(); return this.updateAttendanceStatus(t), "clocked_in" === t.status ? document.dispatchEvent(new CustomEvent("attendance-active", { detail: t.current_duration })) : document.dispatchEvent(new CustomEvent("attendance-inactive")), t } throw new Error(`Server error: ${e.status}`) } catch (e) { console.error("Failed to fetch attendance status:", e); const t = !navigator.onLine || e.message.includes("fetch"); this.updateAttendanceStatus({ success: !1, message: t ? "Connection error - Retrying..." : "Status unavailable - Please refresh" }), t && setTimeout(() => { this.fetchAttendanceStatus() }, 5e3) } }, updateAttendanceStatus(e){ const t = document.getElementById("status-dot"), n = document.getElementById("status-time"), a = document.getElementById("current-status"); if (!e || !e.success) return a.textContent = e?.message || "Status unavailable", t && (t.className = "status-indicator-dot me-2 offline"), void (n && (n.innerHTML = '<small class="text-muted">Try Refreshing</small>')); t && (t.className = "status-indicator-dot me-2"); switch (e.status) { case "not_started": case "completed": case "can_start_new": a.textContent = "completed" === e.status ? "Work completed for today" : "Ready to start work", t.classList.add("online"), n.textContent = e.total_hours_today ? `Total: ${e.total_hours_today}` : "Click to begin"; break; case "clocked_in": a.textContent = "Currently working", t.classList.add("working"), n.textContent = `${e.current_duration || "0:00:00"} elapsed`; break; default: a.textContent = e.message || "Unknown status", t.classList.add("online"), n.textContent = "" } },async renderCalendar(){ const e = document.getElementById("calendar"), t = document.getElementById("calendar-month"); if (!e || !t) return; const n = new Date, a = n.getFullYear(), o = n.getMonth(), r = new Date(a, o, 1), i = r.getDay(), l = new Date(a, o + 1, 0).getDate(), c = n.getDate(); t.textContent = n.toLocaleString("default", { month: "long", year: "numeric" }), e.innerHTML = ""; let d = {}, s = {}; try { const t = await fetch(`/attendance/calendar?year=${a}&month=${o + 1}&refresh=true`); if (!t.ok) throw new Error("Failed to fetch calendar data"); const n = await t.json(); if (n.success && n.day_types) { n.data.forEach(e => { d[e.date] = e }), n.day_types.forEach(e => { s[e.date] = e }) } else throw new Error("Calendar API returned non-success.") } catch (t) { console.warn("⚠️ Falling back to internal calendar data (Holidays/Weekends):", t), generateFallbackDayTypes(a, o + 1).forEach(e => { s[e.date] = e }), this.state.attendanceData.forEach(e => { s[e] && (s[e].is_work_day = !0) }) } ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"].forEach(e => { const t = document.createElement("div"); t.className = "calendar-head", t.textContent = e, e.appendChild(t) }); for (let t = 0; t < i; t++) { const n = document.createElement("div"); n.className = "calendar-cell empty-cell", e.appendChild(n) } for (let t = 1; t <= l; t++) { const n = document.createElement("div"); n.className = "calendar-cell", a = `${a}-${String(o + 1).padStart(2, "0")}-${String(t).padStart(2, "0")}`; const r = s[a], i = d[a], c = document.createElement("div"); c.className = "calendar-date", c.textContent = t, n.appendChild(c); if (r) { r.is_holiday && (n.classList.add("holiday"), n.setAttribute("title", `Holiday: ${r.holiday_info?.name || "Scheduled Break"}`)), (i || r.is_work_day) && (n.classList.add("work-day"), r.is_holiday && n.classList.remove("holiday")); const e = document.createElement("div"); e.className = "calendar-hours has-hours"; let t = i?.total_hours || (i?.sessions_count ? `${i.sessions_count}s` : "0:00"); i?.has_active_session && (n.classList.add("active-session"), t += " ⏰", n.setAttribute("title", "Active Session - Clocked In")), i?.total_hours && n.setAttribute("title", `Worked: ${i.total_hours}`), e.textContent = t, n.appendChild(e) } r?.is_today && n.classList.add("today"), e.appendChild(n) } }, init(){ document.querySelectorAll(".dashboard-toggle .btn").forEach(e => { e.addEventListener("click", () => { document.querySelectorAll(".dashboard-toggle .btn").forEach(e => e.classList.remove("active")), e.classList.add("active"), this.state.range = e.getAttribute("data-range"), this.renderChart() }) }), this.initializeDashboard(), this.setupIntervals() },async initializeDashboard(){ this.updateAttendanceStatus({ success: !1, message: "Loading status..." }), await this.fetchAttendanceStatus(); try { await this.renderChart(), console.log("📈 Chart loaded with timesheet data, now rendering calendar..."), this.renderCalendar() } catch (e) { console.warn("⚠️ Chart failed to load, rendering calendar with fallback data:", e), this.renderCalendar() } }, setupIntervals(){ this.cleanupIntervals(), this.state.autoRefreshInterval = setInterval(() => { console.log("🔄 Auto-refreshing dashboard..."), this.state.isLoading || (this.renderChart(), this.renderCalendar(), this.fetchAttendanceStatus()) }, 3e5), window.addEventListener("beforeunload", () => this.cleanupIntervals(!0)), document.addEventListener("visibilitychange", () => { document.hidden ? (console.log("📱 Page hidden - pausing auto-refresh"), this.cleanupIntervals()) : (console.log("👀 Page visible - resuming auto-refresh"), this.setupIntervals()) }) }, cleanupIntervals(e = !1){ this.state.autoRefreshInterval && (clearInterval(this.state.autoRefreshInterval), this.state.autoRefreshInterval = null), e && this.state.chart && (this.state.chart.destroy(), this.state.chart = null) } }; window.clockIn = async function (e) { try { const t = await fetch("/attendance/clock-in", { method: "POST", headers: { "Content-Type": "application/json", "X-CSRF-TOKEN": document.querySelector('meta[name="csrf-token"]').getAttribute("content") } }), n = await t.json(); n.success ? (DashboardManager.fetchAttendanceStatus(), DashboardManager.renderChart(), DashboardManager.renderCalendar(), showNotification("success", n.message)) : showNotification("warning", n.message) } catch (e) { console.error("Clock in error:", e), showNotification("error", "Failed to clock in. Network issue.") } }, window.clockOut = async function (e) { try { const t = await fetch("/attendance/clock-out", { method: "POST", headers: { "Content-Type": "application/json", "X-CSRF-TOKEN": document.querySelector('meta[name="csrf-token"]').getAttribute("content") } }), n = await t.json(); n.success ? (DashboardManager.fetchAttendanceStatus(), DashboardManager.renderChart(), DashboardManager.renderCalendar(), showNotification("success", `${n.message}. Total work time: ${n.total_hours}`)) : showNotification("warning", n.message) } catch (e) { console.error("Clock out error:", e), showNotification("error", "Failed to clock out. Network issue.") } }, window.toggleSidebar = toggleSidebar, window.showSystemStatus = showSystemStatus, window.showQuickReports = showQuickReports, window.showComingSoon = showComingSoon, window.clockIn = window.clockIn, window.clockOut = window.clockOut, window.quickAddTimesheet = quickAddTimesheet, window.showToast = showToast, window.showAdminNotification = showAdminNotification, window.refreshAdminData = refreshAdminData, window.DashboardManager = DashboardManager, document.addEventListener("click", function (e) { const t = e.target.closest("[data-confirm]"); t && !confirm(t.getAttribute("data-confirm")) && e.preventDefault() }), document.addEventListener("DOMContentLoaded", function () { if (dashboardInitialized) return void console.warn("🔄 Dashboard already initialized, skipping DOMContentLoaded setup."); dashboardInitialized = !0, console.log("🚀 Initializing Dashboard Manager..."), updateTime(), updateClockStatus(), updateClockButtons(), setInterval(updateTime, 1e3), setInterval(updateClockStatus, 3e4), document.querySelectorAll(".nav-link-enhanced").forEach(e => { e.addEventListener("mouseenter", function () { this.style.transform = "translateY(-2px)", this.style.transition = "all 0.3s ease" }), e.addEventListener("mouseleave", function () { this.style.transform = "translateY(0)" }) }), document.querySelectorAll(".nav-link, .dropdown-item").forEach(e => { e.addEventListener("click", function (t) { "dropdown" === this.getAttribute("data-bs-toggle") || this.closest("form") || "#" === this.getAttribute("href") || (this.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Loading...', this.style.opacity = "0.7", setTimeout(() => { this.innerHTML = this.innerHTML, this.style.opacity = "1" }, 3e3)) }) }); const e = localStorage.getItem("sidebar-compact") === "true"; if (e) { const t = document.getElementById("sidebar"), n = document.getElementById("main-content"), a = document.getElementById("toggle-icon"); t.classList.add("compact"), n.classList.add("sidebar-compact"), a.className = "bi bi-chevron-right" } window.innerWidth < 1100 && (document.getElementById("sidebar").classList.add("compact"), document.getElementById("main-content").classList.add("sidebar-compact"), document.getElementById("toggle-icon").className = "bi bi-chevron-right"), initializeAdminDropdowns(), initializeNavbarScrollEffect(), initializeSidebarScrolling(), DashboardManager.init() })}();
